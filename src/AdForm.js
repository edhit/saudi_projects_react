import React, { useState, useEffect, useRef } from "react";
import Notification from "./Notification";

const TelegramStyleForm = () => {

  const [greeting, setGreeting] = useState("");
  const [formData, setFormData] = useState({
    role: "", // –í–æ–¥–∏—Ç–µ–ª—å, –ü–∞—Å—Å–∞–∂–∏—Ä, –ü–æ—Å—ã–ª–∫–∞
    date: "",
    time: "",
    from: "",
    to: "",
    seats: "",
    comment: "",
  });

  const [customCity, setCustomCity] = useState({ from: false, to: false });

  const [generatedMessage, setGeneratedMessage] = useState("");
  const [showNotification, setShowNotification] = useState(false); // –∫–æ–ø–∏—è –≤–æ –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã
  const [showTooltip, setShowTooltip] = useState(false); // –ø–æ–¥—Å–∫–∞–∑–∫–∞
  const [showCopyHint, setShowCopyHint] = useState(false);
  const [highlightCopyButton, setHighlightCopyButton] = useState(false);
  const previewRef = useRef(null);
  const commentRef = useRef(null);
  const [paddingBottom, setPaddingBottom] = useState(0);

  const cities = ["–ú–µ–¥–∏–Ω–∞", "–ú–µ–∫–∫–∞", "–î–∂–∏–¥–¥–∞", "–≠—Ä-–†–∏—è–¥"];
  const roles = ["–ù—É–∂–µ–Ω –≤–æ–¥–∏—Ç–µ–ª—å", "–í–æ–∑—å–º—É –ø–∞—Å—Å–∞–∂–∏—Ä–∞(–æ–≤)", "–í–æ–∑—å–º—É –ø–æ—Å—ã–ª–∫—É(–∏)"];

  useEffect(() => {
    // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∏–ª–µ–π –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    return () => {
      setPaddingBottom(0);
    };
  }, []);

  const handleButtonClick = (field, value) => {
    setFormData({ ...formData, [field]: value });
    if (field === "from" || field === "to") {
      setCustomCity({ ...customCity, [field]: value === "" }); // –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–µ –≤–≤–æ–¥–∞, –µ—Å–ª–∏ "–î—Ä—É–≥–æ–π"
    }
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData({ ...formData, [name]: value });
  };

  const handleGenerateMessage = () => {
    const messageParts = [];

    // // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ
    if (greeting) {
      messageParts.push(greeting);
    }

    
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –ø—É—Å—Ç—ã–µ
      if (formData.role) {
        let icon = (formData.role) === "–ù—É–∂–µ–Ω –≤–æ–¥–∏—Ç–µ–ª—å"
          ? "üöò"
          : formData.role === "–í–æ–∑—å–º—É –ø–∞—Å—Å–∞–∂–∏—Ä–∞(–æ–≤)"
          ? "üöò"
          : "üß≥"

        messageParts.push(`${icon} ${formData.role}`);
      }

      if (formData.date) {
        messageParts.push(`üìÖ ${formData.date}`);
      }

      if (formData.time) {
        messageParts.push(`üïì ${formData.time}`);
      }
    
    
      if (formData.from) {
        messageParts.push(`üìå –û—Ç–∫—É–¥–∞: ${formData.from}`);
      }
    
      if (formData.to) {
        messageParts.push(`üìç –ö—É–¥–∞: ${formData.to}`);
      }
    
      if (formData.seats) {
        let text = (formData.role) === "–ù—É–∂–µ–Ω –≤–æ–¥–∏—Ç–µ–ª—å"
          ? "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤"
          : formData.role === "–í–æ–∑—å–º—É –ø–∞—Å—Å–∞–∂–∏—Ä–∞(–æ–≤)"
          ? "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç"
          : "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–≥."
        messageParts.push(`üî¢ ${text}: ${formData.seats}`);
      }
    
      if (formData.comment) {
        messageParts.push(`${formData.comment}`);
      }

    const formattedMessage = messageParts.join("\n");
    setGeneratedMessage(formattedMessage);

    // –ü–æ–∫–∞–∑–∞—Ç—å —É–∫–∞–∑–∞—Ç–µ–ª—å –∏ –ø–æ–¥—Å–≤–µ—Ç–∏—Ç—å –∫–Ω–æ–ø–∫—É "–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å"
    setShowCopyHint(true);
    setShowTooltip(true);
    setHighlightCopyButton(true);

    // –°–∫—Ä—ã—Ç—å —É–∫–∞–∑–∞—Ç–µ–ª—å –∏ –ø–æ–¥—Å–≤–µ—Ç–∫—É —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
      setShowCopyHint(false);
      setShowTooltip(false);
      setHighlightCopyButton(false);
    }, 3000);

    // –°–∫—Ä–æ–ª–ª –¥–æ –∫–æ–Ω—Ü–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    setTimeout(() => {
      previewRef.current?.scrollIntoView({ behavior: "smooth" });
    }, 100);
  };

  const handleCopyToClipboard = () => {
    // navigator.clipboard.writeText(generatedMessage);
    navigator.clipboard.writeText("generatedMessage");
    setShowNotification(true);
    setTimeout(() => {
      setShowNotification(false);
    }, 3000); // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏—Å—á–µ–∑–∞–µ—Ç —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
  };

  const handleFocus = () => {
    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã –≤–∏–¥–∏–º–æ–π –æ–±–ª–∞—Å—Ç–∏ –∏ –ø–æ–ª—è textarea
    const textareaHeight = commentRef.current?.offsetHeight || 0;

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç—Å—Ç—É–ø–∞, —á—Ç–æ–±—ã –ø–æ–ª–µ –Ω–µ —Å–∫—Ä—ã–≤–∞–ª–æ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    const keyboardHeightEstimate = window.innerHeight * 0.35; // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–º–æ–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å)
    setPaddingBottom(keyboardHeightEstimate + textareaHeight);

    // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –ø–æ–ª—é
    setTimeout(() => {
      commentRef.current?.scrollIntoView({
        behavior: "smooth",
        block: "center",
      });
    }, 300);
  };

  const handleBlur = () => {
    // –°–±—Ä–æ—Å –æ—Ç—Å—Ç—É–ø–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ —Ñ–æ–∫—É—Å–∞ —Å –ø–æ–ª—è –≤–≤–æ–¥–∞
    setPaddingBottom(0);
  };

  return (
    <div class="container mx-auto p-4">
      <div style={{ paddingBottom: `${paddingBottom}px` }}>
        <div className="p-4 max-w-md mx-auto bg-white rounded-lg">
          <h1 className="text-xl font-bold mb-4 text-center">
            üá∏üá¶ –ü–æ–µ–∑–¥–∫–∏ –ø–æ –°–∞—É–¥–∏–∏
          </h1>

          {/* –ß–µ–∫–±–æ–∫—Å—ã –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è */}
          <div className="mb-4">
            <label className="block mb-2 font-semibold">–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ</label>
            <div className="flex flex-wrap gap-2">
              {[
                { label: "ÿßŸÑÿ≥ŸÑÿßŸÖ ÿπŸÑŸäŸÉŸÖ", value: "ÿßŸÑÿ≥ŸÑÿßŸÖ ÿπŸÑŸäŸÉŸÖ" },
                {
                  label: "ÿßŸÑÿ≥ŸÑÿßŸÖ ÿπŸÑŸäŸÉŸÖ Ÿàÿ±ÿ≠ŸÖÿ© ÿßŸÑŸÑŸá Ÿàÿ®ÿ±ŸÉÿßÿ™Ÿá",
                  value: "ÿßŸÑÿ≥ŸÑÿßŸÖ ÿπŸÑŸäŸÉŸÖ Ÿàÿ±ÿ≠ŸÖÿ© ÿßŸÑŸÑŸá Ÿàÿ®ÿ±ŸÉÿßÿ™Ÿá",
                },
                { label: "–ë–µ–∑ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è", value: "" },
              ].map((option) => (
                <button
                  key={option.value}
                  onClick={() => setGreeting(option.value)}
                  className={`px-4 py-2 rounded-lg ${
                    greeting === option.value
                      ? "bg-blue-500 text-white"
                      : "bg-gray-200 text-gray-700 hover:bg-gray-300"
                  }`}
                >
                  {option.label}
                </button>
              ))}
            </div>
          </div>

          <div class="relative flex items-center mb-4">
            <div class="flex-grow border-t border-gray-300"></div>
          </div>

          {/* Role Selection */}
          <div className="mb-4">
            {/* <label className="block mb-2 font-semibold">–†–æ–ª—å</label> */}
            <div className="flex flex-wrap gap-2">
              {roles.map((role) => (
                <button
                  key={role}
                  type="button"
                  onClick={() => handleButtonClick("role", role)}
                  className={`block px-6 py-3 text-xl rounded-xl cursor-pointer w-full text-center ${
                    formData.role === role
                      ? "bg-blue-500 text-white"
                      : "bg-gray-200 text-gray-700"
                  }`}
                >
                  {role}
                </button>
              ))}
            </div>
          </div>

          <div class="relative flex items-center mb-6">
            <div class="flex-grow border-t border-gray-300"></div>
          </div>

          {/* Date */}
          <div className="mb-4">
            <label className="block mb-2 font-semibold">–î–∞—Ç–∞</label>
            <input
              type="date"
              name="date"
              value={formData.date}
              onChange={handleInputChange}
              className="w-full p-2 border rounded-lg"
            />
          </div>

          {/* Time */}
          <div className="mb-4">
            <label className="block mb-2 font-semibold">–í—Ä–µ–º—è:</label>
            <input
              type="time"
              name="time"
              value={formData.time}
              onChange={handleInputChange}
              className="w-full p-2 border rounded-lg"
            />
          </div>

          {/* From */}
          <div className="mb-4">
            <label className="block mb-2 font-semibold">–û—Ç–∫—É–¥–∞</label>
            <div className="flex gap-2 flex-wrap">
              {cities.map((city) => (
                <button
                  key={city}
                  type="button"
                  onClick={() => handleButtonClick("from", city)}
                  className={`px-4 py-2 rounded-lg ${
                    formData.from === city
                      ? "bg-blue-500 text-white"
                      : "bg-gray-200 text-gray-700"
                  }`}
                >
                  {city}
                </button>
              ))}
              <button
                type="button"
                onClick={() => handleButtonClick("from", "")}
                className={`px-4 py-2 rounded-lg ${
                  customCity.from
                    ? "bg-blue-500 text-white"
                    : "bg-gray-200 text-gray-700"
                }`}
              >
                –î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥
              </button>
            </div>
            {customCity.from && (
              <input
                type="text"
                name="from"
                placeholder="–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥"
                value={formData.from}
                onChange={handleInputChange}
                className="mt-2 w-full p-2 border rounded-lg"
              />
            )}
          </div>

          {/* To */}
          <div className="mb-4">
            <label className="block mb-2 font-semibold">–ö—É–¥–∞</label>
            <div className="flex gap-2 flex-wrap">
              {cities.map((city) => (
                <button
                  key={city}
                  type="button"
                  onClick={() => handleButtonClick("to", city)}
                  className={`px-4 py-2 rounded-lg ${
                    formData.to === city
                      ? "bg-blue-500 text-white"
                      : "bg-gray-200 text-gray-700"
                  }`}
                >
                  {city}
                </button>
              ))}
              <button
                type="button"
                onClick={() => handleButtonClick("to", "")}
                className={`px-4 py-2 rounded-lg ${
                  customCity.to
                    ? "bg-blue-500 text-white"
                    : "bg-gray-200 text-gray-700"
                }`}
              >
                –î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥
              </button>
            </div>
            {customCity.to && (
              <input
                type="text"
                name="to"
                placeholder="–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥"
                value={formData.to}
                onChange={handleInputChange}
                className="mt-2 w-full p-2 border rounded-lg"
              />
            )}
          </div>

          {/* Seats */}
          <div className="mb-4">
            <label className="block mb-2 font-semibold">
            {formData.role === "–ù—É–∂–µ–Ω –≤–æ–¥–∏—Ç–µ–ª—å"
              ? "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤"
              : formData.role === "–í–æ–∑—å–º—É –ø–∞—Å—Å–∞–∂–∏—Ä–∞(–æ–≤)"
              ? "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç"
              : "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–≥."}
            </label>
            <input
              type="number"
              name="seats"
              value={formData.seats}
              ref={commentRef}
              onFocus={handleFocus}
              onBlur={handleBlur}
              onChange={handleInputChange}
              className="w-full p-2 border rounded-lg"
            />
          </div>

          {/* Comment */}
          <div className="mb-4">
            <label className="block mb-2 font-semibold">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</label>
            <textarea
              name="comment"
              value={formData.comment}
              onChange={handleInputChange}
              ref={commentRef}
              onFocus={handleFocus}
              onBlur={handleBlur}
              className="block w-full mb-4 p-2 border rounded"
              placeholder="–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
            ></textarea>
          </div>

          {/* Submit */}
          <button
            onClick={handleGenerateMessage}
            className="w-full mt-4 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 relative"
          >
            –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            {showTooltip && (
              <div className="absolute bottom-full mb-2 left-1/2 transform -translate-x-1/2 bg-gray-700 text-white text-base px-3 py-1 rounded shadow-lg">
                –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≤ –≥—Ä—É–ø–ø—É —Ç–µ–ª–µ–≥—Ä–∞–º–º
              </div>
            )}
          </button>

          {/* –§—É–Ω–∫—Ü–∏—è –≤–≤—ã–≤–æ–¥–∞ */}
          {generatedMessage && (
            <div className="mt-4" ref={previewRef}>
              <h3 className="font-bold mb-2">–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏—è</h3>
              <div className="p-3 bg-gray-100 rounded border">
                <pre className="whitespace-pre-wrap">{generatedMessage}</pre>
              </div>
              <div className="relative mt-4">
                {showCopyHint && (
                  <div
                    className="absolute left-1/2 transform -translate-x-1/2 -top-4 text-sm text-gray-600 animate-bounce-down"
                    style={{ fontSize: "35px" }}
                  >
                    üëá
                  </div>
                )}
                <button
                  onClick={handleCopyToClipboard}
                  className={`w-full mt-2 px-4 py-2 text-white rounded ${
                    highlightCopyButton ? "bg-green-400" : "bg-green-500"
                  } hover:bg-green-600`}
                >
                  –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                </button>
              </div>
            </div>
          )}

          {showNotification && (
            <Notification
              message="–°–æ–æ–±—â–µ–Ω–∏–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"
              duration={3000}
            />
          )}
        </div>
      </div>
    </div>
  );
};

export default TelegramStyleForm;
